import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "./useAuth";
import { useToast } from "./use-toast";

export interface Application {
  id: string;
  application_id: string;
  company_name: string;
  ayush_category: string;
  founded_year: number;
  business_model: string;
  location: string;
  business_description?: string;
  target_market?: string;
  funding_stage?: string;
  status: string;
  current_step: number;
  total_steps: number;
  submitted_at?: string;
  created_at: string;
  updated_at: string;
}

export interface Document {
  id: string;
  application_id: string;
  name: string;
  file_path?: string;
  status: string;
  uploaded_at?: string;
  verified_at?: string;
  verification_status?: string;
  verification_notes?: string;
  verified_by?: string;
  file_size?: number;
  mime_type?: string;
}

export interface ActivityLog {
  id: string;
  application_id: string;
  type: string;
  message: string;
  created_at: string;
}

export interface Profile {
  id: string;
  user_id: string;
  full_name: string;
  email: string;
  phone?: string;
  qualification?: string;
}

export function useApplicationData() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [application, setApplication] = useState<Application | null>(null);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [activities, setActivities] = useState<ActivityLog[]>([]);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (user) {
      fetchAllData();
    }
  }, [user]);

  const fetchAllData = async () => {
    if (!user) return;
    
    setLoading(true);
    try {
      await Promise.all([
        fetchProfile(),
        fetchApplication(),
      ]);
    } catch (error) {
      console.error("Error fetching data:", error);
      toast({
        title: "Error",
        description: "Failed to load application data",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const fetchProfile = async () => {
    if (!user) return;

    const { data, error } = await supabase
      .from("profiles")
      .select("*")
      .eq("user_id", user.id)
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error("Error fetching profile:", error);
      return;
    }

    setProfile(data);
  };

  const fetchApplication = async () => {
    if (!user) return;

    const { data: applicationData, error: appError } = await supabase
      .from("applications")
      .select("*")
      .eq("user_id", user.id)
      .maybeSingle();

    if (appError) {
      console.error("Error fetching application:", appError);
      return;
    }

    setApplication(applicationData);

    // If application exists, fetch related data
    if (applicationData) {
      await Promise.all([
        fetchDocuments(applicationData.id),
        fetchActivities(applicationData.id),
      ]);
    }
  };

  const fetchDocuments = async (applicationId: string) => {
    const { data, error } = await supabase
      .from("documents")
      .select("*")
      .eq("application_id", applicationId)
      .order("created_at", { ascending: true });

    if (error) {
      console.error("Error fetching documents:", error);
      return;
    }

    setDocuments(data || []);
  };

  const fetchActivities = async (applicationId: string) => {
    const { data, error } = await supabase
      .from("activity_logs")
      .select("*")
      .eq("application_id", applicationId)
      .order("created_at", { ascending: false });

    if (error) {
      console.error("Error fetching activities:", error);
      return;
    }

    setActivities(data || []);
  };

  const createApplication = async (applicationData: Partial<Application>) => {
    if (!user) return null;

    const { data, error } = await supabase
      .from("applications")
      .insert({
        user_id: user.id,
        application_id: "", // Will be auto-generated by trigger
        company_name: applicationData.company_name || "",
        ayush_category: applicationData.ayush_category || "",
        founded_year: applicationData.founded_year || new Date().getFullYear(),
        business_model: applicationData.business_model || "",
        location: applicationData.location || "",
        business_description: applicationData.business_description,
        target_market: applicationData.target_market,
        funding_stage: applicationData.funding_stage,
      })
      .select()
      .single();

    if (error) {
      console.error("Error creating application:", error);
      toast({
        title: "Error",
        description: "Failed to create application",
        variant: "destructive",
      });
      return null;
    }

    // Create default documents
    const defaultDocuments = [
      { name: "Company Registration Certificate", status: "required" },
      { name: "Founder ID Proof", status: "required" },
      { name: "Business Plan", status: "required" },
      { name: "Financial Statements", status: "required" },
    ];

    await supabase
      .from("documents")
      .insert(defaultDocuments.map(doc => ({
        application_id: data.id,
        ...doc,
      })));

    // Log application creation
    await supabase
      .from("activity_logs")
      .insert({
        application_id: data.id,
        type: "application-submit",
        message: "Application created successfully",
        created_by: user.id,
      });

    setApplication(data);
    await fetchDocuments(data.id);
    await fetchActivities(data.id);

    toast({
      title: "Success",
      description: "Application created successfully!",
    });

    return data;
  };

  const updateProfile = async (profileData: Partial<Profile>) => {
    if (!user || !profile) return;

    const { error } = await supabase
      .from("profiles")
      .update(profileData)
      .eq("user_id", user.id);

    if (error) {
      console.error("Error updating profile:", error);
      toast({
        title: "Error",
        description: "Failed to update profile",
        variant: "destructive",
      });
      return;
    }

    setProfile({ ...profile, ...profileData });
    toast({
      title: "Success",
      description: "Profile updated successfully!",
    });
  };

  const uploadDocument = async (file: File, documentId: string) => {
    if (!user || !application) return false;

    try {
      // First validate the document
      const { data: validationResult, error: validationError } = await supabase.functions.invoke('document-processor', {
        body: {
          documentId,
          fileInfo: {
            name: file.name,
            type: file.type,
            size: file.size
          },
          action: 'validate'
        }
      });

      if (validationError) {
        console.error('Validation error:', validationError);
        throw new Error('Document validation failed');
      }

      if (!validationResult.valid) {
        throw new Error(validationResult.errors.join(', '));
      }

      // Upload file to Supabase storage
      const fileExt = file.name.split('.').pop();
      const fileName = `${user.id}/${documentId}.${fileExt}`;
      
      const { error: uploadError } = await supabase.storage
        .from('documents')
        .upload(fileName, file, {
          cacheControl: '3600',
          upsert: true
        });

      if (uploadError) {
        console.error('Upload error:', uploadError);
        throw uploadError;
      }

      // Process the document via edge function
      const { data: processResult, error: processError } = await supabase.functions.invoke('document-processor', {
        body: {
          documentId,
          fileMetadata: {
            name: file.name,
            type: file.type,
            size: file.size,
            path: fileName
          },
          action: 'process'
        }
      });

      if (processError) {
        console.error('Processing error:', processError);
        throw new Error('Document processing failed');
      }

      // Update document record with file path
      const { error: updateError } = await supabase
        .from('documents')
        .update({
          file_path: fileName,
          file_size: file.size,
          mime_type: file.type,
          status: "uploaded",
          uploaded_at: new Date().toISOString(),
          verification_status: 'pending'
        })
        .eq('id', documentId);

      if (updateError) {
        console.error('Update error:', updateError);
        throw updateError;
      }

      // Log document upload
      await supabase
        .from("activity_logs")
        .insert({
          application_id: application.id,
          type: "document-upload",
          message: `Document "${file.name}" uploaded successfully and is pending verification`,
          created_by: user.id,
        });

      await fetchDocuments(application.id);
      await fetchActivities(application.id);

      toast({
        title: "Success",
        description: "Document uploaded successfully and is pending verification!",
      });

      return true;
      
    } catch (error) {
      console.error('Error uploading document:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to upload document",
        variant: "destructive",
      });
      return false;
    }
  };

  return {
    application,
    documents,
    activities,
    profile,
    loading,
    createApplication,
    updateProfile,
    uploadDocument,
    refetch: fetchAllData,
  };
}